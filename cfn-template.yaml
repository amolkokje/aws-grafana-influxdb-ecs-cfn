AWSTemplateFormatVersion: "2010-09-09"
Description: abc

Mappings:
  RegionECSOptimizedAMI:
    us-east-2:
      AMI: ami-008c5ba1857e0fdec
    us-east-1:
      AMI: ami-09edd32d9b0990d49


Parameters:
  ServerConfigBucketName:
    Description: Server Config files. TODO - create on fly
    Type: String
    Default: vesta-influxdb-grafana-config


  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SubnetName:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet Identifier

  VpcName:
    Type: AWS::EC2::VPC::Id
    Description: VPC Identifier

  InstanceType:
    Description: ECS instance type
    Type: String
    Default: m5ad.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  AccessLocation:
    Description: The IP address range that can be used to access the stack
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref AWS::StackName

  ECSInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to Container Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref AccessLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AccessLocation

  ECSContainerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSContainerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSContainerInstanceRole

  ECSContainerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ECSInstanceSecurityGroup
      IamInstanceProfile:  !Ref ECSContainerInstanceProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionECSOptimizedAMI, !Ref 'AWS::Region', AMI]
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
            echo 'INIT: update server'
            yum -y update
            sudo yum -y install awscli

            echo 'INIT: config to connect instance to cluster'
            sudo touch /etc/ecs/ecs.config
            sudo chmod 777 /etc/ecs/ecs.config
            sudo echo "ECS_CLUSTER=${AWS::StackName}" > /etc/ecs/ecs.config

            echo 'INIT: get the server config files from S3'
            sudo mkdir /data
            sudo chmod 777 /data
            cd /data
            aws s3 sync s3://${ServerConfigBucketName} .

            echo 'INIT: create data drive for InfluxDB data mount'
            sudo mkdir /data/influxdbdata

            echo 'INIT: update the ECS container agent, and restart'
            docker pull amazon/amazon-ecs-agent:latest
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            sudo docker run --name ecs-agent --detach=true --restart=on-failure:10 --volume=/var/run:/var/run --volume=/var/log/ecs/:/log --volume=/var/lib/ecs/data:/data --volume=/etc/ecs:/etc/ecs --net=host --env-file=/etc/ecs/ecs.config amazon/amazon-ecs-agent:latest

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      Volumes:
        - Host:
            SourcePath: '/data/grafana/dashboards'
          Name: 'grafana-dashboards'
        - Host:
            SourcePath: '/data/grafana/custom.ini'
          Name: 'grafana-config'
        - Host:
            SourcePath: '/data/provisioning'
          Name: 'grafana-provisioning'
        - Host:
            SourcePath: '/data/influxdbdata'
          Name: 'influxdb-data'

      ContainerDefinitions:
        - Name: grafana
          Image: grafana/grafana:6.3.4
          PortMappings:
            - ContainerPort: 3000
              HostPort: 443
          Cpu: 1024
          Memory: 2048
          MountPoints:
            - SourceVolume: 'grafana-dashboards'
              ContainerPath: '/var/lib/grafana/dashboards'
            - SourceVolume: 'grafana-config'
              ContainerPath: '/etc/grafana/custom.ini'
            - SourceVolume: 'grafana-provisioning'
              ContainerPath: '/etc/grafana/provisioning'
          Environment:
            - Name: 'GF_SECURITY_ADMIN_USER'
              Value: 'amol'
            - Name: 'GF_SECURITY_ADMIN_PASSWORD'
              Value: 'amol'

        - Name: influxdb
          Image: influxdb
          PortMappings:
            - ContainerPort: 8086
              HostPort: 80
          Cpu: 4096
          Memory: 4096
          MountPoints:
            - SourceVolume: 'influxdb-data'
              ContainerPath: '/var/lib/influxdb"'







  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSTaskDefinition
      - ECSContainerInstance
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100



